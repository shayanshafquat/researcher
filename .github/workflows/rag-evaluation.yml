name: RAG Evaluation Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  evaluate:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: 1.7.1
        virtualenvs-create: true
        virtualenvs-in-project: true
        
    - name: Load cached venv
      id: cached-poetry-dependencies
      uses: actions/cache@v3
      with:
        path: .venv
        key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}
          
    - name: Install dependencies
      if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
      run: poetry install --no-interaction --with test
      
    # Create results directory
    - name: Create results directory
      run: mkdir -p tests/results
        
    - name: Run evaluation tests
      env:
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
      run: |
        poetry run pytest tests/test_evaluation/test_experiments.py -v
        
    - name: Upload evaluation results
      uses: actions/upload-artifact@v3
      with:
        name: evaluation-results
        path: tests/results/evaluation_results.csv
        
    - name: Comment PR with Results
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v6
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const fs = require('fs');
          try {
            const results = fs.readFileSync('tests/results/evaluation_results.csv', 'utf8');
            const lines = results.split('\n');
            const headers = lines[0].split(',');
            
            // Create markdown table
            let tableContent = '| ' + headers.join(' | ') + ' |\n';
            tableContent += '|' + headers.map(() => '---').join('|') + '|\n';
            
            // Add data rows
            for (let i = 1; i < lines.length; i++) {
              if (lines[i].trim()) {
                tableContent += '| ' + lines[i].split(',').join(' | ') + ' |\n';
              }
            }
            
            const comment = `## RAG Evaluation Results\n\n${tableContent}\n[Full Results](${context.serverUrl}/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId})`;
            
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: comment
            });
          } catch (error) {
            console.error('Error processing results:', error);
            core.setFailed(error.message);
          }